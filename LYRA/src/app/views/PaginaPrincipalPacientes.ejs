<%if(typeof Usuario !== 'undefined'){%>
  <%if(typeof TipoUsu !== 'undefined' && TipoUsu === 2){%>
    <!DOCTYPE html>
    <html>
    <head>
      <title>Chat</title>
        <link rel="stylesheet" href="/css/chatLyra.css">
        <link
        rel="shortcut icon"
        href="https://i.ibb.co/gFdWfc6/Whats-App-Image-2023-04-27-at-8-43-16-AM-1-modified.png"
        type="image/svg"
        />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
      
    </head>
    <body>
        <a href="/Paciente/EditarPerfil" class="floating-button">
            <i class="fa fa-pencil icotamano"></i>
            <span class="button-text">Editar información personal</span>
        </a>
        <br>
        <a  href="/" class=" floating-button2">
            <i class="fa fa-close icotamano"></i>
            <span class="button-text">Salir</span>
        </a>

        <div>
          <select hidden name="listaDeDispositivos" id="listaDeDispositivos"></select>
          <br><br>
          <p hidden id="duracion"></p>
          <br>
          <button hidden class="microphone-btn2" id="btnDetenerGrabacion">
            <i class="fa fa-microphone microicon"></i>
          </button>
          
      <button  class="microphone-btn" id="btnComenzarGrabacion">
        <i class="fa fa-microphone microicon"></i>
      </button>
      </div>
        <div class="microphonemessage">Habla conmigo</div>

    </body>

    

    <script>
    const microphoneBtn = document.querySelector(".microphone-btn");
    const microphoneBtn2 = document.querySelector(".microphone-btn2");
    const microphoneMessage = document.querySelector(".microphonemessage");
    const cargando = 'cargandoB';
    const error = 'errorB';
    const respondiendo = 'respondiendoB';
    var ide1 = document.querySelector("#btnComenzarGrabacion");
    var ide2 = document.querySelector("#btnDetenerGrabacion");
    //aqui empieza lo de grabar voz puta 
    const init = () => {
        const tieneSoporteUserMedia = () =>
            !!(navigator.mediaDevices.getUserMedia)

        // Si no soporta...
        // Amable aviso para que el mundo comience a usar navegadores decentes ;)
        if (typeof MediaRecorder === "undefined" || !tieneSoporteUserMedia())
            return alert("Tu navegador web no cumple los requisitos; por favor, actualiza a un navegador decente como Firefox o Google Chrome");


        // Declaración de elementos del DOM
        const $listaDeDispositivos = document.querySelector("#listaDeDispositivos"),
            $duracion = document.querySelector("#duracion"),
            $btnComenzarGrabacion = document.querySelector("#btnComenzarGrabacion"),
            $btnDetenerGrabacion = document.querySelector("#btnDetenerGrabacion");

        // Algunas funciones útiles
        const limpiarSelect = () => {
            for (let x = $listaDeDispositivos.options.length - 1; x >= 0; x--) {
                $listaDeDispositivos.options.remove(x);
            }
        }

        const segundosATiempo = numeroDeSegundos => {
            let horas = Math.floor(numeroDeSegundos / 60 / 60);
            numeroDeSegundos -= horas * 60 * 60;
            let minutos = Math.floor(numeroDeSegundos / 60);
            numeroDeSegundos -= minutos * 60;
            numeroDeSegundos = parseInt(numeroDeSegundos);
            if (horas < 10) horas = "0" + horas;
            if (minutos < 10) minutos = "0" + minutos;
            if (numeroDeSegundos < 10) numeroDeSegundos = "0" + numeroDeSegundos;

            return `${horas}:${minutos}:${numeroDeSegundos}`;
        };
        // Variables "globales"
        let tiempoInicio, mediaRecorder, idIntervalo;
        const refrescar = () => {
                $duracion.textContent = segundosATiempo((Date.now() - tiempoInicio) / 1000);
            }
            // Consulta la lista de dispositivos de entrada de audio y llena el select
        const llenarLista = () => {
            navigator
                .mediaDevices
                .enumerateDevices()
                .then(dispositivos => {
                    limpiarSelect();
                    dispositivos.forEach((dispositivo, indice) => {
                        if (dispositivo.kind === "audioinput") {
                            const $opcion = document.createElement("option");
                            // Firefox no trae nada con label, que viva la privacidad
                            // y que muera la compatibilidad
                            $opcion.text = dispositivo.label || `Dispositivo ${indice + 1}`;
                            $opcion.value = dispositivo.deviceId;
                            $listaDeDispositivos.appendChild($opcion);
                        }
                    })
                })
        };
        // Ayudante para la duración; no ayuda en nada pero muestra algo informativo
        const comenzarAContar = () => {
            tiempoInicio = Date.now();
            idIntervalo = setInterval(refrescar, 500);
        };

        // Comienza a grabar el audio con el dispositivo seleccionado
        const comenzarAGrabar = () => {
            if (!$listaDeDispositivos.options.length) return alert("No hay dispositivos");
            // No permitir que se grabe doblemente
            if (mediaRecorder) return alert("Ya se está grabando");
           
            navigator.mediaDevices.getUserMedia({
                    audio: {
                        deviceId: $listaDeDispositivos.value,
                    }
                })
                .then(
                    stream => {
                        // Comenzar a grabar con el stream
                        mediaRecorder = new MediaRecorder(stream);
                        mediaRecorder.start();
                        comenzarAContar();
                        // En el arreglo pondremos los datos que traiga el evento dataavailable
                        const fragmentosDeAudio = [];
                        // Escuchar cuando haya datos disponibles
                        mediaRecorder.addEventListener("dataavailable", evento => {
                            // Y agregarlos a los fragmentos
                            fragmentosDeAudio.push(evento.data);
                        });
                        // Cuando se detenga (haciendo click en el botón) se ejecuta esto
                        mediaRecorder.addEventListener("stop", () => {
                            // Detener el stream
                            stream.getTracks().forEach(track => track.stop());
                            // Detener la cuenta regresiva
                            detenerConteo();
                            // Convertir los fragmentos a un objeto binario
                            const blobAudio = new Blob(fragmentosDeAudio);

                            // Crear una URL o enlace para descargar
                            const urlParaDescargar = URL.createObjectURL(blobAudio);
                            // Crear un elemento <a> invisible para descargar el audio
                            let a = document.createElement("a");
                            document.body.appendChild(a);
                            a.style = "display: none";
                            a.href = urlParaDescargar;
                            a.download = "grabacion.wav";
                            // Hacer click en el enlace
                            a.click();
                            // Y remover el objeto
                            window.URL.revokeObjectURL(urlParaDescargar);
                        });
                    }
                )
                .catch(error => {
                    // Aquí maneja el error, tal vez no dieron permiso
                    console.log(error)
                });
        };


        const detenerConteo = () => {
            clearInterval(idIntervalo);
            tiempoInicio = null;
            $duracion.textContent = "";
        }

        const detenerGrabacion = () => {
            if (!mediaRecorder) return alert("No se está grabando");
            mediaRecorder.stop();
            mediaRecorder = null;
        };


        $btnComenzarGrabacion.addEventListener("click", comenzarAGrabar);
        $btnDetenerGrabacion.addEventListener("click", detenerGrabacion);

        // Cuando ya hemos configurado lo necesario allá arriba llenamos la lista

        llenarLista();
    }
    // Esperar a que el documento esté listo...
    document.addEventListener("DOMContentLoaded", init);
    microphoneBtn.addEventListener("click", () => {
      // iniciar la animación del botón
        microphoneBtn2.classList.add("animate");
        ide2.hidden = false;
        ide1.hidden = true;
        microphoneMessage.textContent = "Escuchando...";
      
    });

   microphoneBtn2.addEventListener("click", () => {
      if (microphoneBtn2.classList.contains("animate")) {
        // detener la animación del botón
        microphoneBtn2.classList.remove("animate");
        ide1.hidden = false;
        ide2.hidden = true;
        microphoneMessage.textContent = "Habla conmigo"; // Agregar el texto "¡Habla conmigo!"
      } 
    });

    if (cargando === 'cargando' && !microphoneBtn.classList.contains("animate")) {
        microphoneBtn.classList.add("animate-circle");
        microphoneBtn.innerHTML = '<i class="fa fa-circle-o-notch microicon2"></i>';
        microphoneMessage.textContent = "Cargando..."; 
      }

    if (error === 'error' && !microphoneBtn.classList.contains("animate")) {
        microphoneBtn.classList.add("animate2");
        microphoneBtn.innerHTML = '<i class="fa fa-times microicon2"></i>';
        microphoneMessage.textContent = "Ha ocurrido un error..."; 
      }

      if (respondiendo === 'respondiendo' && !microphoneBtn.classList.contains("animate")) {
        microphoneBtn.classList.add("hablando");
        microphoneBtn.innerHTML = '<i class="fa fa-ellipsis-h microicon2 dy"></i>';
        microphoneMessage.textContent = "Hablando..."; 
      }

     


    </script>
    </html>
  <%}else{%>
    <!DOCTYPE html>
    <html>
    <head>
      <title>Error - No tienes permisos</title>
    </head>
    <body>
      <script src="/js/Alertas.js"></script>
      <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
      <script>
        NoPermisos()
      </script>
    </body>
    </html>
  <%}%>
<%}else{%>
<!DOCTYPE html>
<html>
<head>
<title>Error - Debes Iniciar Sesión</title>
</head>
<body>
<script src="/js/Alertas.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script>
  SesionCaducada()
</script>
</body>
</html>
<%}%>